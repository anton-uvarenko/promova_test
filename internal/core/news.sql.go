// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: news.sql

package core

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addNews = `-- name: AddNews :one
INSERT INTO news (
  title,
  content,
  created_at,
  updated_at
) VALUES (
  $1,
  $2,
  NOW(),
  NOW()
)
RETURNING id
`

type AddNewsParams struct {
	Title   pgtype.Text
	Content pgtype.Text
}

func (q *Queries) AddNews(ctx context.Context, arg AddNewsParams) (int32, error) {
	row := q.db.QueryRow(ctx, addNews, arg.Title, arg.Content)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteNews = `-- name: DeleteNews :exec
DELETE FROM news
WHERE id = $1
`

func (q *Queries) DeleteNews(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNews, id)
	return err
}

const getAllNews = `-- name: GetAllNews :many
SELECT id, title, content, created_at, updated_at FROM news
`

func (q *Queries) GetAllNews(ctx context.Context) ([]News, error) {
	rows, err := q.db.Query(ctx, getAllNews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewsById = `-- name: GetNewsById :one
SELECT id, title, content, created_at, updated_at FROM news
WHERE id = $1
`

func (q *Queries) GetNewsById(ctx context.Context, id int32) (News, error) {
	row := q.db.QueryRow(ctx, getNewsById, id)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNews = `-- name: UpdateNews :exec
UPDATE news
SET 
  title = $2,
  content = $3,
  updated_at = NOW()
WHERE
  id = $1
`

type UpdateNewsParams struct {
	ID      int32
	Title   pgtype.Text
	Content pgtype.Text
}

func (q *Queries) UpdateNews(ctx context.Context, arg UpdateNewsParams) error {
	_, err := q.db.Exec(ctx, updateNews, arg.ID, arg.Title, arg.Content)
	return err
}
